name: Main Taski workflow

on:
  push:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest
    # Блок services аналогичен docker-compose.yml
    services:
      postgres:
        image: postgres:13.10
        # Указываем имя тестовой базы, имя и пароль пользователя в открытом виде,
        # ведь эта база будет работать только во время прогона тестов
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
        ports:
          - 5432:5432
        # Эта конструкция описывает проверку готовности сервиса postgres
        # Если её не будет, то тесты могут запуститься раньше, чем сервер PostgreSQL
        # В результате тесты опять решат, что базы нет, — и упадут
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip 
          pip install flake8==6.0.0 flake8-isort==6.0.0
          pip install -r ./backend/requirements.txt
      # Этот шаг дополним переменными для доступа к БД
      - name: Test with flake8 and django tests
        # Добавляем env-переменные для доступа к БД
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
          # Сервер БД запущен в Docker, но его порт проброшен на хост
          # Поэтому подключаемся к 127.0.0.1:5432
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
        run: |
          python -m flake8 backend/
          cd backend/
          python manage.py test

  build_and_push_to_docker_hub:
    name: Push Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        # Получение исходного кода из репозитория
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        # Установка сборщика контейнеров Docker
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        # Авторизация на Docker Hub
        uses: docker/login-action@v2
        # При помощи with передаём в action параметры username и password
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          # Хорошо ли держать логин и пароль прямо в коде workflow?
          # Нет, это нехорошо
      - name: Push to DockerHub
        # Одновременный билд и пуш образа в Docker Hub
        uses: docker/build-push-action@v4
        with:
          # Параметр context: ./backend/ указывает, что нужный Dockerfile
          # находится в ./backend/
          context: ./backend/
          # Параметр push: true указывает, что образ нужно не только собрать,
          # но и отправить на Docker Hub
          push: true
          # В параметре tags задаётся название и тег для образа.
          # Для каждого пересобранного образа
          # устанавливаем тег latest, чтобы потом
          # на сервере и в docker-compose.yml не указывать версию
          tags: ssaschenkaa/taski_backend:latest

  frontend_tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up nodeJS
        # Это готовый воркфлоу для установки Node.js на раннер
        uses: actions/setup-node@v3
        with:
          # Это параметр воркфлоу, указывающий нужную версию Node.js
          node-version: 18

      - name: Install dependencies
        # Эта команда устанавливает зависимости для фронтенда
        run: |
          cd frontend/
          npm ci

      - name: Test frontend
        # Запускаем 
        run: |
          cd frontend/
          npm run test
  build_frontend_and_push_to_docker_hub:
    name: Push frontend Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: frontend_tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: ssaschenkaa/taski_frontend:latest

  build_gateway_and_push_to_docker_hub:
    name: Push gateway Docker image to DockerHub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./gateway/
          push: true
          # Тут вместо username должен быть ваш логин на Docker Hub
          tags: ssaschenkaa/taski_gateway:latest

  deploy:
    runs-on: ubuntu-latest
    needs: 
      # Дождёмся билда всех образов Taski
      - build_and_push_to_docker_hub
      - build_frontend_and_push_to_docker_hub
      - build_gateway_and_push_to_docker_hub
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
    # Копируем docker-compose.production.yml на продакшен-сервер
    - name: Copy docker-compose.yml via ssh
      uses: appleboy/scp-action@master
    # Передаём параметры для action appleboy/scp-action:
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: |
          -----BEGIN OPENSSH PRIVATE KEY-----
          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
          cK2CD3T/M25B4XA/9cwJfv6I0yk=
          -----END OPENSSH PRIVATE KEY-----
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        source: "docker-compose.production.yml"
        target: "taski"
    - name: Executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: |
          -----BEGIN OPENSSH PRIVATE KEY-----
          b3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jdHIAAAAGYmNyeXB0AAAAGAAAABDKEAm9vv
          qNPs7a18tkbN92AAAAEAAAAAEAAAGXAAAAB3NzaC1yc2EAAAADAQABAAABgQC8dbGPZxHL
          IfPmvbSGVcoRI0TwKHqvF6s0Rqo74Z0lao77wh81fybna2Fob/dM0mRzFCDcfdxKZmecQI
          mN3/6ypIkX9IXUIMjdvSQq17Jc3UbDEgzr57zwE4lkzchIbeGEhmggzkWkCQVNxaVqTfkt
          mhHIaUAggW3o+mrUaW7qNc/2FzQGGfCJSCgdkGw/uO2iUpVIEYskT2IHhsBT8WSrS8v6r8
          RURGcftHllH/Qb5/VuQ6n5xOMgKwL8PvE+0yrYL6u78zZ+myhMBwGmn6qFx9I7BETbVTTB
          VT2Afvdv3Kxt1fRD4BW8+uL3q6datG3FLaLHBwlWoQgIH4f/WIftJBZUxlPSP+U6+UNres
          G3vtbU40ukPTPrlkgyBdyHA3JB/NpCVoY8M1IFrZxhKsQUBtha4EhdUDWREhdofVrCpXe7
          vg2SRr9HnzpbUI794a5uHbcT8KTRPfedhaqIirJzR67fGk7LrQcbErsjEpV9dWcRfkSRoA
          mUjrRjb8HmoBEAAAWQ497A2rRK8dFKbnE0IEQ0rPcWf9W/F4Ie5jSSIIUX0mkOqiwef+sW
          WNNzJP7RiA6JIZiIJXFKw8J/tI/csFza3gp4cs0rmtYqXaAOsgykcbphLfb3SKNXxbAnS4
          hdL1vKC6WQ+peZDvOCkcTRSiBzBb4VllLTcEJPJ9CZQ8FDBnl+Fk84ekEFvvaExdnyKhEo
          XIDCL8QtlXWpQ+RQyL4WBaXTxM2GTRcjQhlguPUVtquvmlzLwytbN5rs8SR2iITnUV4Le0
          YQb2ABkJB3596rrGpSbZWszYfcx0Oc17euLoBGm7/w21INDFJKrLH6EdkMcSm5Gd68zmUs
          uzaGoxWbl3x6cLPx2JQ7eMb61ofIyyExquOBH96sEPRrQFg845wI7bRxpPVExmcWImNbLs
          1C6iyHmPoglrjFmNJFCC8M5Pg7IMJKAttdghA+g1nvgTp59A8QJY4YAm5HFk5V0U1qrLHq
          aW04cRMDsR8gNRy5e54iZ6LxIb7yp7bMnQzSEWs3HauQjb9Wu2G0GPQsokFrD+2bVqB4V8
          oMkYrBk6RreuDj2KyP90FWDKpzoPRjPHzbTLfzs3VqmasTaUtWsE2YvEtGSAWBFzNDWLL3
          7GHWwsflpwgJf/OcaEvc/URMIyMEyzlvzKi2XSUxP8a8NrhO1OPaEidRCEzCT1u/iHg5BK
          7znNrvROU7Udvi/JuQ8nhSDZYf6J/Rox6vNN7x/EeVuARxBV8zbRToxJfEm7Bg0pasLVaD
          sFySULV4RguCq1SjYJIoxkhd7pD5FkqwoH0mU8vsjLul+YJhmifuKzkH0Z/FmPjqtiAaob
          nHlBCCyMH1YZ8kZncfR1OU5V+89GKFZKHFH2cvIojk2B1ODJw6U0h8nZTlpQ2+PgRh3Lny
          8bA93Arh7EvEq8bQ3xbN3w1Xoe//H9P9gDmgTlHvCruEoItMZzVMFJ9IxU+powVtG1QtOA
          Tpv9Whcoz0dh71iD5xvPqoGCbA/nazViivo6Gswyl0y4SV+qGI76O0bzOUlFTXYtvVxYTD
          h1bqgxsGHOm/1EpxlwPYLdwr7SKNZo52dbKP9Gzc/iWEPV4CdC4TSk0JOda2eB9Hh6bSQk
          EgwEKL46motxiv8vjPpVhWXp1c/Oyo6EPZB50G61Dm5XnmETO1ygdKLbgz4Ce4cAH5PvJQ
          EN5F9dZq0QKuK5ywD/7YM/u4JfuTKKYZFKzDQP4oV3ZRQ0649xGXRXrDKIU9katBGcP7E9
          qO3fGtcjvTdrme5Sn0h3TxXVwf7fM7xPNhR4j6Erf0ypG+f9gVQ8TQqj16AaU6J/FrM90M
          ANOtjvVpFfmzqvFH2rvorpFcB25dDrR530OdCV1B+sj4m4eZc9oAceeNPji2bElpKSrK4N
          qQ/PfUZne/eHgcA79tdSFKKZSVYr3ek9rGi9yELeGUUB7IQRIbOGa8Xse/JqI8dvqlcRNl
          mwBRFGG7puufobUAbwrYrVYOYZKip35LCkUst0kZmJvDOmpB4PBuTQT7IGr/nFQXBQCAMx
          eJMnFD5NjKlbAm6BRFLZSIUYvni7+2WlL+X8SAahzWDi92r6DKlAaHFjaePrVaGzqbYtRe
          x2jUf13Rlf0d077EVUY1j5Es2zdevwwqxYmO3LaPi7WMwN+cdnnQ2E7JOrZG9xjjeZKWZs
          GDUChsc1FuIcILWOgbcdHyzX1W4g70N9Nz2lLw9aY1oWQCogFpiMGAHwgUvxILr/H2mqKQ
          V/U5CPE7MZ86iRwazHGVphYqYkw6z+TF2E9cMuihFPeLJjKOuOwE24J2dAIubLw10L/pn0
          1ARZzCyLS3O87yzqw3jBcxDmMGohwj34aY5V+M9DERG3KFVFGHZpz4XFCUVD+9zm2iYjDd
          cK2CD3T/M25B4XA/9cwJfv6I0yk=
          -----END OPENSSH PRIVATE KEY-----
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        # Параметр script передаёт в action appleboy/ssh-action команды,
        # которые нужно выполнить на сервере, 
        # с которым установлено соединение
        script: |
          cd taski
          # Выполняет pull образов с Docker Hub
          sudo docker compose -f docker-compose.production.yml pull
          # Перезапускает все контейнеры в Docker Compose
          sudo docker compose -f docker-compose.production.yml down
          sudo docker compose -f docker-compose.production.yml up -d
          # Выполняет миграции и сбор статики
          sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
          sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic
          sudo docker compose -f docker-compose.production.yml exec backend cp -r /app/collected_static/. /backend_static/static/
  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: Деплой успешно выполнен!